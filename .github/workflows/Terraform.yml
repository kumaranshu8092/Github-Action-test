name: 'Terraform'

# on:
#   push:
#     branches: [ "main" ]

# permissions:
#   contents: read

# env:
#   ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
#   ARM_CLIENT_SECRET: ${{secrets.AZURE_SECRET_ID}}
#   ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
#   ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
#   ROOT_PATH: '${{github.workspace}}/src/terraform'
      

# jobs:
#   terraform:
#     name: 'Terraform Plan'
#     runs-on: ubuntu-latest
#     env:

#       ARM_SKIP_PROVIDER_REGISTRATION: true

#     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#     defaults:
#       run:
#         shell: bash

#     steps:
#     # Checkout the repository to the GitHub Actions runner
#     - name: Checkout
#       uses: actions/checkout@v4

#     # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v3
      
#         # hgchgc

#     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#     - name: Terraform Init
#       working-directory: ${{env.ROOT_PATH}}
#       run: 
#         export ARM_CLIENT_ID = $AZURE_CLIENT_ID
#         export ARM_CLIENT_SECRET = $AZURE_SECRET_ID
#         export ARM_SUBSCRIPTION_ID =$AZURE_SUBSCRIPTION_ID
#         export ARM_TENANT_ID = $AZURE_TENANT_ID
        
#         terraform init

#       env:
#         ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
#         ARM_CLIENT_SECRET: ${{secrets.AZURE_SECRET_ID}}
#         ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
#         ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
#     # Checks that all Terraform configuration files adhere to a canonical format
#     # - name: Terraform Format
#     #   run: terraform fmt -check

#     # Generates an execution plan for Terraform
#     # - name: Terraform Plan
#     #   working-directory: ${{env.ROOT_PATH}}
#     #   run: terraform plan -input=false

#       # On push to "main", build or change infrastructure according to Terraform configuration files
#       # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    


name: "IAC - CI/CD"
on:
  push:
    branches: [ "main" ]
    

permissions:
  id-token: write
  contents: read

env:
  ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.AZURE_SECRET}}
  ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION}}
  ARM_TENANT_ID: ${{secrets.AZURE_TENANT}}
  ROOT_PATH: '${{github.workspace}}/src/terraform'
  TERRAFORM_VERSION: 1.8.3
      

jobs:
  terraform:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Login to Azure and set subscription
      env:
        ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
        ARM_CLIENT_SECRET: ${{secrets.AZURE_SECRET}}
        ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION}}
        ARM_TENANT_ID: ${{secrets.AZURE_TENANT}}
      shell: bash
      run : |
        az login --service-principle -u ${{env.ARM_CLIENT_ID}} -p ${{env.ARM_CLIENT_SECRET}} --tenant ${{env.ARM_TENANT_ID}}
        az account set -- subscription ${{env.ARM_SUBSCRIPTION_ID}}


    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{env.TERRAFORM_VERSION}}
      
        # hgchgc

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ${{env.ROOT_PATH}}
      run: terraform init -input=false -backend-config=tenant_id=${AZURE_TENANT} -backend-config=subscription_id=${AZURE_SUBSCRIPTION} -backend-config=client_id=${AZURE_CLIENT_ID} -backend-config=client_secret=${AZURE_SECRET}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Validate
      working-directory: ${{env.ROOT_PATH}}
      run: terraform validate

    # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #   working-directory: ${{env.ROOT_PATH}}
    #   run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    
