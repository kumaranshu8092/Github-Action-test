# name: 'Terraform'

# on:
#   push:
#     branches: [ "main" ]

# env:
#   ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
#   ARM_CLIENT_SECRET: ${{secrets.AZURE_SECRET_ID}}
#   ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
#   ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
#   ROOT_PATH: '${{github.workspace}}/src/terraform'
      

# jobs:
#   terraform:
#     name: 'Terraform Plan'
#     runs-on: ubuntu-latest
#     env:

#       ARM_SKIP_PROVIDER_REGISTRATION: true

#     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#     defaults:
#       run:
#         shell: bash

#     steps:
#     # Checkout the repository to the GitHub Actions runner
#     - name: Checkout
#       uses: actions/checkout@v4

#     # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v3
      
#         # hgchgc

#     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#     - name: Terraform Init
#       working-directory: ${{env.ROOT_PATH}}
#       run: 
#         export ARM_CLIENT_ID = $AZURE_CLIENT_ID
#         export ARM_CLIENT_SECRET = $AZURE_SECRET_ID
#         export ARM_SUBSCRIPTION_ID =$AZURE_SUBSCRIPTION_ID
#         export ARM_TENANT_ID = $AZURE_TENANT_ID
        
#           terraform init

#       env:
#           ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
#           ARM_CLIENT_SECRET: ${{secrets.AZURE_SECRET_ID}}
#           ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
#           ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
#           ROOT_PATH: '${{github.workspace}}/src/terraform'
#     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#     - name: Terraform Init
#       working-directory: ${{env.ROOT_PATH}}
#       run: terraform init
      

#     # Checks that all Terraform configuration files adhere to a canonical format
#     # - name: Terraform Format
#     #   run: terraform fmt -check

#     # Generates an execution plan for Terraform
#     # - name: Terraform Plan
#     #   working-directory: ${{env.ROOT_PATH}}
#     #   run: terraform plan -input=false

#       # On push to "main", build or change infrastructure according to Terraform configuration files
#       # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    

# File: .github/workflows/workflow.yml

name: Run Azure Login with System-assigned Managed Identity
on: [push]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          auth-type: IDENTITY
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      # Azure CLI Action only supports linux self-hosted runners for now.
      # If you want to execute the Azure CLI script on a windows self-hosted runner, you can execute it directly in `run`.
      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show

      - name: Azure PowerShell script
        uses: azure/powershell@v2
        with:
          azPSVersion: "latest"
          inlineScript: |
            Get-AzContext
            Get-AzResourceGroup